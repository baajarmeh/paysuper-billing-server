name: Build
on:
  push:
  pull_request:
  workflow_dispatch:

env:
  MONGOVERSION: "4.2"
  JENKINS_AUTH_TOKEN: ${{ secrets.JENKINS_AUTH_TOKEN }}
  JENKINS_BUILD_TOKEN: ${{ secrets.JENKINS_BUILD_TOKEN }}

jobs:
  tests:
    name: tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          persist-credentials: true

      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.13'

      - name: Start MongoDB v4.2.0
        uses: supercharge/mongodb-github-action@1.2.0
        with:
          mongodb-version: 4.2

      - name: Start Redis
        uses: supercharge/redis-github-action@1.2.0

      - name: Start Rabbit
        uses: nijel/rabbitmq-action@v1.0.0

      - name: Tests
        env:
          HELLO_SIGN_DEFAULT_TEMPLATE: ${{ secrets.HELLO_SIGN_DEFAULT_TEMPLATE }}
          HELLO_SIGN_PAYOUT_TEMPLATE: ${{ secrets.HELLO_SIGN_PAYOUT_TEMPLATE }}
          HELLO_SIGN_AGREEMENT_CLIENT_ID: ${{ secrets.HELLO_SIGN_AGREEMENT_CLIENT_ID }}
          HELLO_SIGN_PAYOUTS_CLIENT_ID: ${{ secrets.HELLO_SIGN_PAYOUTS_CLIENT_ID }}
          GO111MODULE: "on"
          MONGO_DSN: "mongodb://localhost:27017/paysuper_test"
          CARD_PAY_API_URL: "https://sandbox.cardpay.com"
          CARD_PAY_API_SANDBOX_URL: "https://sandbox.cardpay.com"
          CUSTOMER_COOKIE_PUBLIC_KEY: "LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FnOEFNSUlDQ2dLQ0FnRUF0djhRMFJwRWpHaWxVMUtLNktuWApUTWJIeWhiUDhXd3kvMloybW9WNW1nL0xkZFhJUm9qTTVzKzdvaHBuUEVHd0pYbWoveHBERnhuWHVWQVk2N2JKCm8raVBkWFBBT2Y5VG5DNkhRMFNtZ3JFYkpXcGxTZFNsTFordHptQnBrYjJmQm5Iai9rSlQwK0lxTHFNSXpzbzIKT2o2cUZnaVBMaHFDYkNWMHBNMEpvVmZFb21kdVdjZ0ZBWjdoaWo3UHhSZ3lTOFo2aGlsYVU1YU1ITlJ5dUNDSgpNNCtqaEtDL01rRUtmYy9TTlRVcVpsUXFqMXdkOXp0aytDR0Y5ZTdiN25vbktWSkdTa2NOTmQxNGV5OGg4QUFTCmpHb0ZSOE9JTFBlK0svTk5kZE5CU1NsWGdDeUpVQUlEYVp2ekQrZmVsNCtZUUhDc3F1bVJ4TGJqWHFOUlVtQkQKVFRnNW9UYW92T3o5bGhFdVdMYlFORWFqaC9oZktiVnd0L2pmM0NIc2JNTk9peFVXem1Ua3VFalJienJma0lXegpGc2F3SkJjOFVzdU5SQUtXS1JJUVl4aVA1ZTdZUXJycGVPRjRONFZQMEhzVmYzT2ZzQzFORC9DcW4vaFhyTjdRCnNhNlk2emF1SVdJd2ZoMUVLR1NZcHlnVUZyNFFiK0tMNjgvUkIyY1RjMjlBVCtTK3pSdnhiaTNJeXNLcFFyRWwKSVdsa0E0cU10VHM1OUZKT2E3MUwxSUNHTmJiZk5TRU5BSW5XekI2cnhJZzVnUGxEQTFHQkZnOEVtSTVSNjNRSgpyV1hnQjNZQ0hZd1NSOHdGMzFoM2RsRDIvVjZ5WmdOd3ZwSW1rWEZ3bEowNklOKzRCMjZPakFjcHRaZkxsWVRaCnpzZXY1ZFJSNUVpVS9sRVZZK0tzWFBrQ0F3RUFBUT09Ci0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQo="
          CUSTOMER_COOKIE_PRIVATE_KEY:  "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS0FJQkFBS0NBZ0VBdHY4UTBScEVqR2lsVTFLSzZLblhUTWJIeWhiUDhXd3kvMloybW9WNW1nL0xkZFhJClJvak01cys3b2hwblBFR3dKWG1qL3hwREZ4blh1VkFZNjdiSm8raVBkWFBBT2Y5VG5DNkhRMFNtZ3JFYkpXcGwKU2RTbExaK3R6bUJwa2IyZkJuSGova0pUMCtJcUxxTUl6c28yT2o2cUZnaVBMaHFDYkNWMHBNMEpvVmZFb21kdQpXY2dGQVo3aGlqN1B4Umd5UzhaNmhpbGFVNWFNSE5SeXVDQ0pNNCtqaEtDL01rRUtmYy9TTlRVcVpsUXFqMXdkCjl6dGsrQ0dGOWU3Yjdub25LVkpHU2tjTk5kMTRleThoOEFBU2pHb0ZSOE9JTFBlK0svTk5kZE5CU1NsWGdDeUoKVUFJRGFadnpEK2ZlbDQrWVFIQ3NxdW1SeExialhxTlJVbUJEVFRnNW9UYW92T3o5bGhFdVdMYlFORWFqaC9oZgpLYlZ3dC9qZjNDSHNiTU5PaXhVV3ptVGt1RWpSYnpyZmtJV3pGc2F3SkJjOFVzdU5SQUtXS1JJUVl4aVA1ZTdZClFycnBlT0Y0TjRWUDBIc1ZmM09mc0MxTkQvQ3FuL2hYck43UXNhNlk2emF1SVdJd2ZoMUVLR1NZcHlnVUZyNFEKYitLTDY4L1JCMmNUYzI5QVQrUyt6UnZ4YmkzSXlzS3BRckVsSVdsa0E0cU10VHM1OUZKT2E3MUwxSUNHTmJiZgpOU0VOQUluV3pCNnJ4SWc1Z1BsREExR0JGZzhFbUk1UjYzUUpyV1hnQjNZQ0hZd1NSOHdGMzFoM2RsRDIvVjZ5ClpnTnd2cElta1hGd2xKMDZJTis0QjI2T2pBY3B0WmZMbFlUWnpzZXY1ZFJSNUVpVS9sRVZZK0tzWFBrQ0F3RUEKQVFLQ0FnQXI1bUM0YVI3TXVFWUJDU285eXBEVjRGSUpqeE52alU5bXFjUUdLY01VVEhtNDJRSmt1V2krYmxOSwovaDZKL0JBdnpWQ2tZRDU4Q2owUVBjRGN1MHNBUVVnNUd2MmdiRG80bTRqamdGS1p3N2NKY002L3VYMnV4a0hCCjRxc3d4VmFqQ3l0dzBhU2VqZ0Vra3dRSDU4YStqazNyWHo1S0J4NEdwNjJsNDNKTi9HbzFzNjVyWjJxY0N1dDgKYUxrYlJVUzduTy9EdzZQaHJab0xTSVFFMi9sT0gwVlJDZWNVUFRveEdHd0xTNmZTU0pxMUxab2F0MnJ2Zzh0SgpSbllJYmRGN1BqdVNraHovTVJRNEtRUnhPUE02TUN6NEhGWk13MW9oM1FwV0c4bnJyVGxLakdTY2h2OGVsTVRvCnFlMWlXcFpoenlYOUVtOWZ5NmdjQ2YzMlR4V1Z4dWI0dSsyQW4xdlVZUmJaeTBoUlZMeUVGQkVoRzFXZ3haMmcKU1hoWi9KM1hIV2xjQTFpZCtiZ3NrM0dQSjNCWC9pejA0TGgzbmtqdzd6MmY4cUpJazRjQytaZHpUWFc4VDF0bwpDdWhGTkpycEdoRDJVSllQSTNUTUNuY2cxNWF1Nkd1Qk9sVVQ1Skxpb2l1cVJCQVZaYmxoVHZPSmtSd0s0UlQyClNlQlB6UkkzK3lTeTJMK1NnaVdKWGordGxPckZuTmdLN1F6bGdOalhRK3dobHVSK0FlTHN2YlZKaTRqL3hGWDAKcktvMDRwclVCakVUeDJnV1YxMmpMcGppVC9GWWJyMHF4MTJzSXh4dmsxdDFzTEUyUkJmVkxmQlJndlBBcDZjcAo3b1V6bHAzZXJVY2YwMXlZVzhXV3R5Q1RlKzk3MnRPcTQ1RzNYV0w2MWU4Y243cC9BUUtDQVFFQTNpK2EyQytWCkxvZUhQdkxlek5QbXZBN2txcU5weUt4em1ZQmpFY2swKy9xNml1cnVoTGRMenp0VmVYRmxqV21oeG50R0dWWk0KRzJXTTB4QkJ0R2pUWDMrUVNnRkFtQi9KdXZlWEE1VGhKWnE0ZHpTL1dERzRYdENTaTRBZjREK3R1ck5vd1lFdwpyYmRiek02eVpWbndRM2R6L0o1YUpsOVUwcEp3VjBYZ3JKZENwK0JJUjJCR1NMR0I0SFRmYlNIRzNUTjJMc2hECmhOU3BYRkNZUnkxcXYweGhkN3VXYXMvOFpHekYvOU05Q1FRaDJoNkd4N3lUSUFwZ1FJMGVsL1F4SklFdGFOeFkKeU0wZUlEa1R2aGROWFFJQTFxK1J1U0RJQ09wcUdOSTQ3UXNjNU1RdG5zK3p0TVBScnkyOW5MVFMzbE0raENEbQpzcE5McW54VE01VmJzUUtDQVFFQTB0aWc0UmRKTlNnQWVpL1YrYmFKY2Y3enUxU1A0Zm0wdEZTcG9pY0JIZzJUCkVVL1dLTnFuQmRoTldKbEdlTVJ2VTIzbnhFemREb1dWUDhPcGErSE5UdGM5REFCaWpHb2JjbElBb3MvZmRjaHoKbWdDMGJpQ25uOXNxK1hFMUp4WUo3VWRvZ1dIOGY5M2ZnU3dsN0E3WitEUXVLaUdLaWNURkpqY0RNdjgxZUNaQQpEUVRaV1FGanlid2tEaDV3N3dLeG1qTFY1YmdYdkwyTFhSclJTNTU2Mkg3TEZkaGZXNkdmbC93NllPaFV2d0oxCi83TFZDMUVSMTE0WEpkL2hWSVNZQ0ZxdzhkRkVzMys4enBBOUJ3QWo2cVE4S3l5T0Z4a3BRREZaUGY1czgzazIKUnBzd1RHYVFSNy8xbk9GRyt3UlM3Q05HOXFBZlh3LzltamxIcklnUHlRS0NBUUFLV05VeE5DWVNZS1ZmdlJlNwpHak1vbHRqM1NWem54NEFxcWR2elBCZUhsSW1UWnBWdEFNdzYvbHhncDNNL1BxZ1dBaStsaG10TTYxRy9rb1k4CnpKVHJZWmxxbU54Vk9VVy91MEFCSHJITmVvTVVxaFF2RzBHbXlMZktYMUVjdEZwMjAxd1JodDZwZUZ5Q0VTNGwKb2lhYVBibmREZExNN3F1WWt0RkFmelNUVlFmNW9XdzhSck4vTnlVQk92QWN1UEgxNHl1aHlobTYyZHg1UEJlYgpXUFlicW9idmVJRHN3SHJVZ214R0dhUkNBenRBV1NPVnNhWjRXNE5YL2pwcWdTaTR0bnRTNHRBUHFkMjVTbThzCjd4RGZQL1NpQ3RNU2VBQll5ZkhlN2d0UW5xL2R4M1VJYkV2R0kwaGtqQkRFZDNkS2V6M3lFVVl0RXNiM1RZcmkKWUJaQkFvSUJBUUNUOW0vWDVrWjZwaXJIbEdBOTBFcGVGRU9vdDZ3Tk1mWU5Bc2pVUVRqNGhTQXE2dkxvVXFFWgphZlRGY3pMUU4xSEVvNEVjOGEvRHJCelQxWlJFWC81N0VITUh4QkZrWm1ZQ2NPZC9XZytBRVg2R21XNEZScWM3CmVFdU5KMVBjclF1a1Z4TlFrSm5vaGFSK2VxUFdKNG54TTNVZUhkR2g0dE5UZ1JHZXJSZ3h5KzN3OVBFdUU5cWEKVEl5azE5bjY4TkgvMnlMZUJiV3F2djFaQmlQUVJGUURMOStHNGdQeFF0ZkRpYjdTR05pMy9wc2VLTHAzS1pveQpvQlh3ZjA4YXg3NEZSdGVicTNiaDNJZDhFaDZ4bGZpZWhraXZKNkpETldZTVpWVXlPeVRzSzZqYUhiZmtOYW1VCm9ISlZlSVllUzZlQmpUUVVpTVBiSzFhVjd4S01VaU41QW9JQkFIVytSZUc2blJKNkdoU08zcERjS3hkU0xWeWkKQTJTQVFvNiswTTJTVFFHV0MzVTZJcGRTN3NGUTkzaHFwVDhWTE5PTlREVVNxTVBLbHI5a3B1TjJ6VnN2NWh2MgpydmE1dWpLUzFRNEtZMjREaU41TjN2WElHbzg5OGVlQkJFSEJpTVhEOUMwTWZkSVhYWm91SUNUblFqSXVrS0xXCjFhU3hKVUZDMURJMGpZejliaEEzS1lnd2g5LzdsN0I4eVRGR1gxb2ZIYjZlMCs0b2w1SjBJZldKTDVDM091aXYKWnFNVGVndXdUeHRmZTdTWFo1ZkIrSTluMFF4aklhSnRVM1ltdHdqVEt0S3Uyd1craWJ1b0lXMlU5bUFSdStNWAo5UDlhbU5oN2wxMWI2dVcyV041Q2JsV29mc2lUR1lFc0l3amxOak1DVUFCQXd3eDNHcWN4UnZGV2hBOD0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0="
          ORDER_VIEW_UPDATE_BATCH_SIZE: 5
          EMAIL_NOTIFICATION_FINANCIER_RECIPIENT: "finance@paysuper.com"
          CACHE_REDIS_ADDRESS: "127.0.0.1:6379"
          EMAIL_ONBOARDING_ADMIN_RECIPIENT: "test@protocol.one"
          USER_INVITE_TOKEN_SECRET: "Secret"
          CENTRIFUGO_PAYMENT_FORM_APISECRET: "api_secret"
          CENTRIFUGO_DASHBOARD_APISECRET: "api_secret"
          CENTRIFUGO_PAYMENT_FORM_SECRET: "payment_form_secret"
          CENTRIFUGO_DASHBOARD_SECRET: "dashboard_secret"
          CENTRIFUGO_PAYMENT_FORM_URL: "http://localhost/payment_form"
          CENTRIFUGO_DASHBOARD_URL: "http://localhost/dashboard"
        run: go test ./... -coverprofile=coverage.out -covermode=atomic -p=1 -timeout=30m
      - name: publish codecov
        run: bash <(curl -s https://codecov.io/bash)
  
      - name: Notify Slack 
        if: always()
        uses: kpritam/slack-job-status-action@54eea0dd141dd572d7fbbe96416e9c5d8ba57976
        with:
          job-status: ${{ job.status }}
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          channel: ${{ secrets.SLACK_CHANNEL_ID }}

  deploy-tst:
    name: deploy-tst
    needs: tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    steps:
      - name: Deploy to tst
        run: docker run -e JENKINS_AUTH_TOKEN=$JENKINS_AUTH_TOKEN -e JENKINS_BUILD_TOKEN=$JENKINS_BUILD_TOKEN -e JENKINS_BUILD_PROJECT=$GITHUB_REPOSITORY -e JENKINS_BUILD_BRANCH=${GITHUB_REF##*/} p1hub/p1jenkinstrigger
      - name: Notify Slack 
        if: always()
        uses: kpritam/slack-job-status-action@54eea0dd141dd572d7fbbe96416e9c5d8ba57976
        with:
          job-status: ${{ job.status }}
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          channel: ${{ secrets.SLACK_CHANNEL_ID }}

  deploy-stg-releasebranch:
    needs: tests
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/release') && github.event_name == 'push'
    steps:
      - name: Deploy release branch to stg
        run: |
          docker run -e JENKINS_AUTH_TOKEN=$JENKINS_AUTH_TOKEN -e JENKINS_BUILD_TOKEN=$JENKINS_BUILD_TOKEN \
            -e JENKINS_BUILD_PROJECT=$GITHUB_REPOSITORY -e JENKINS_BUILD_BRANCH=${GITHUB_REF#refs/heads/} -e DEPLOY_TO_ENV="stg" -e IS_RB="true" p1hub/p1jenkinstrigger
      - name: Notify Slack 
        if: always()
        uses: kpritam/slack-job-status-action@54eea0dd141dd572d7fbbe96416e9c5d8ba57976
        with:
          job-status: ${{ job.status }}
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          channel: ${{ secrets.SLACK_CHANNEL_ID }}

  deploy-stg-tag:
    needs: tests
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') && github.event_name == 'push'
    steps:
      - name: Deploy release tag to stg
        run: |
          docker run -e JENKINS_AUTH_TOKEN=$JENKINS_AUTH_TOKEN -e JENKINS_BUILD_TOKEN=$JENKINS_BUILD_TOKEN \
            -e JENKINS_BUILD_PROJECT=$GITHUB_REPOSITORY -e JENKINS_BUILD_BRANCH=${GITHUB_REF##*/} -e DEPLOY_TO_ENV="stg" p1hub/p1jenkinstrigger
      - name: Notify Slack 
        if: always()
        uses: kpritam/slack-job-status-action@54eea0dd141dd572d7fbbe96416e9c5d8ba57976
        with:
          job-status: ${{ job.status }}
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          channel: ${{ secrets.SLACK_CHANNEL_ID }}

