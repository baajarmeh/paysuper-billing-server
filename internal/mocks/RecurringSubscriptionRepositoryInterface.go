// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	billingpb "github.com/paysuper/paysuper-proto/go/billingpb"

	mock "github.com/stretchr/testify/mock"
)

// RecurringSubscriptionRepositoryInterface is an autogenerated mock type for the RecurringSubscriptionRepositoryInterface type
type RecurringSubscriptionRepositoryInterface struct {
	mock.Mock
}

// GetById provides a mock function with given fields: _a0, _a1
func (_m *RecurringSubscriptionRepositoryInterface) GetById(_a0 context.Context, _a1 string) (*billingpb.RecurringSubscription, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *billingpb.RecurringSubscription
	if rf, ok := ret.Get(0).(func(context.Context, string) *billingpb.RecurringSubscription); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.RecurringSubscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: _a0, _a1
func (_m *RecurringSubscriptionRepositoryInterface) Insert(_a0 context.Context, _a1 *billingpb.RecurringSubscription) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.RecurringSubscription) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *RecurringSubscriptionRepositoryInterface) Update(_a0 context.Context, _a1 *billingpb.RecurringSubscription) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.RecurringSubscription) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
