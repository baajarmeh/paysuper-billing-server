// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	billingpb "github.com/paysuper/paysuper-proto/go/billingpb"

	mock "github.com/stretchr/testify/mock"
)

// RecurringPlanRepositoryInterface is an autogenerated mock type for the RecurringPlanRepositoryInterface type
type RecurringPlanRepositoryInterface struct {
	mock.Mock
}

// Find provides a mock function with given fields: ctx, merchantId, projectId, externalId, groupId, query, offset, count
func (_m *RecurringPlanRepositoryInterface) Find(ctx context.Context, merchantId string, projectId string, externalId string, groupId string, query string, offset int32, count int32) ([]*billingpb.RecurringPlan, error) {
	ret := _m.Called(ctx, merchantId, projectId, externalId, groupId, query, offset, count)

	var r0 []*billingpb.RecurringPlan
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string, int32, int32) []*billingpb.RecurringPlan); ok {
		r0 = rf(ctx, merchantId, projectId, externalId, groupId, query, offset, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*billingpb.RecurringPlan)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, string, int32, int32) error); ok {
		r1 = rf(ctx, merchantId, projectId, externalId, groupId, query, offset, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindCount provides a mock function with given fields: ctx, merchantId, projectId, externalId, groupId, query
func (_m *RecurringPlanRepositoryInterface) FindCount(ctx context.Context, merchantId string, projectId string, externalId string, groupId string, query string) (int64, error) {
	ret := _m.Called(ctx, merchantId, projectId, externalId, groupId, query)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string) int64); ok {
		r0 = rf(ctx, merchantId, projectId, externalId, groupId, query)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, string) error); ok {
		r1 = rf(ctx, merchantId, projectId, externalId, groupId, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: _a0, _a1
func (_m *RecurringPlanRepositoryInterface) GetById(_a0 context.Context, _a1 string) (*billingpb.RecurringPlan, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *billingpb.RecurringPlan
	if rf, ok := ret.Get(0).(func(context.Context, string) *billingpb.RecurringPlan); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingpb.RecurringPlan)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: _a0, _a1
func (_m *RecurringPlanRepositoryInterface) Insert(_a0 context.Context, _a1 *billingpb.RecurringPlan) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.RecurringPlan) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *RecurringPlanRepositoryInterface) Update(_a0 context.Context, _a1 *billingpb.RecurringPlan) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.RecurringPlan) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
